extends ../layout

block content
    mixin tableTemplateMixin(p)
        table(class=p+'Template' border="1")
            tr(class=p align="center")
                td.paramName
                    input
                td.param
                    select.paramType
                        option int
                        option string
                        option simpleArray
                        option array
                        
                    table(class=p+'Array' border="1" style="display:none")
                        tr(align="center")
                            td
                                a(href="#" onclick='onAdd'+p+'Array(0)') 添加
                        tr(align="center")
                            td 参数名
                            td 类型
                            td 描述
                td.paramNote
                    input

    mixin tableArrayTemplateMixin(p)
        table(class=p+'ArrayTemplate' border="1")
            tr(class='paramArray' align="center")
                td.paramName
                    input
                td.param
                    select.paramType
                        option int
                        option string
                td.paramNote
                    input


    mixin paramsMixin(p)
        hr
        p 上行参数
        a(href="#" onclick="onAdd"+p+"()") 添加
        table(class=p border="1")
            tr(align="center")
                td 参数名
                td 类型
                td 描述


    script.
        var g_c2sCount = 0;
        var g_s2cCount = 0;

        String.prototype.format = function(args) {
            var result = this;
            if (arguments.length > 0) {    
                if (arguments.length == 1 && typeof (args) == "object") {
                    for (var key in args) {
                        if(args[key]!=undefined){
                            var reg = new RegExp("({" + key + "})", "g");
                            result = result.replace(reg, args[key]);
                        }
                    }
                }
                else {
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i] != undefined) {
                            var reg = new RegExp("({[" + i + "]})", "g");
                            result = result.replace(reg, arguments[i]);
                        }
                    }
                }
            }
            return result;
        }


        function onAddc2s() {
            var tb = $('table.c2s');
            var firstTr = $('table.c2sTemplate tr:eq(0)');
            var html = firstTr.html();
            
            //- html = html.replace("c2sArray", "c2sArray" + g_c2sCount);
            html = html.replace("onAddc2sArray(0)", "onAddc2sArray(" + g_c2sCount + ")");
            html = html.replace("select.paramType", "select.paramType" + g_c2sCount);
            html = '<tr class="c2s" align="center">' + html + '</tr>';
            
            tb.append(html);

            $('table.c2s tr.c2s:eq(' + g_c2sCount + ') td.param select').change(function(index, o) {
                var typeStr = $('table.c2s tr.c2s:eq(' + index + ') td.param select').val();
                if (typeStr == 'array' || typeStr == 'simpleArray') {
                    $('table.c2s tr.c2s:eq(' + index + ') td.param table').show();
                }
                else {
                    $('table.c2s tr.c2s:eq(' + index + ') td.param table').hide();
                    $('table.c2s tr.c2s:eq(' + index + ') td.param table tr:gt(1)').remove();
                }
            }.bind(this, g_c2sCount));

            g_c2sCount++;
        }

        function onAddc2sArray(trIndex) {
            var tableName = 'table.c2sArray' + trIndex;
            var tb = $(tableName);
            var firstTr = $("table.c2sArrayTemplate tr:eq(0)");
            var html = firstTr.html();
            html = '<tr class="c2sArray" align="center">' + html + '</tr>';

            tb.append(html);
        }

        function onAdds2c() {
            var tb = $('table.s2c');
            var firstTr = $('table.s2cTemplate tr:eq(0)');
            var html = firstTr.html();
            
            
            //- html = html.replace("s2cArray", "s2cArray" + g_s2cCount);
            html = html.replace("onAdds2cArray(0)", "onAdds2cArray(" + g_s2cCount + ")");
            html = html.replace("paramType", "paramType" + g_s2cCount);
            html = '<tr class="s2c" align="center">' + html + '</tr>';
            
            tb.append(html);

            $('table.s2c tr.s2c:eq(' + g_s2cCount + ') td.param select').change(function(index, o) {
                var typeStr = $('table.s2c tr.s2c:eq(' + index + ') td.param select').val();
                if (typeStr == 'array' || typeStr == 'simpleArray') {
                    $('table.s2c tr.s2c:eq(' + index + ') td.param table').show();
                }
                else {
                    $('table.s2c tr.s2c:eq(' + index + ') td.param table').hide();
                    $('table.s2c tr.s2c:eq(' + index + ') td.param table tr:gt(1)').remove();
                }
            }.bind(this, g_s2cCount));

            g_s2cCount++;
        }

        function onAdds2cArray(trIndex) {
            var tableName = 'table.s2cArray' + trIndex;
            var tb = $(tableName);
            var firstTr = $("table.s2cArrayTemplate tr:eq(0)");
            var html = firstTr.html();
            html = '<tr class="s2cArray" align="center">' + html + '</tr>';

            tb.append(html);
        }

        function makeArrayParam(prefix) {
            var data = {
                type: 'array',
                content: {}
            };

            var len = $(prefix + 'td.param table tr.c2sArray').length;
            for (var i = 0; i < len; ++i) {
                var newPrefix = prefix + 'td.param table tr.c2sArray:eq(' + i + ') ';
                var name = $(newPrefix + 'td.paramName input').val();
                var type = $(newPrefix + 'td.param select').val();
                switch(type) {
                    case 'int':
                        data.content[name] = makeIntParam(newPrefix);
                        break;
                    case 'string':
                        data.content[name] = makeStringParam(newPrefix);
                        break;
                }
            }

            return data;
        }

        function makeSimpleArrayParam(prefix) {
            var data = {
                type: 'simpleArray',
                content: {}
            };

            var type = $(prefix + 'td.param table tr.c2sArray td.param select').val();
            switch(type) {
                case 'int':
                    data.content = makeIntParam(prefix + 'td.param table tr.c2sArray ');
                    break;
                case 'string':
                    data.content = makeStringParam(prefix + 'td.param table tr.c2sArray ');
                    break;
            }

            return data;
        }

        function makeIntParam(prefix) {
            var data = {
                type: 'int',
                length: 4,
                desc: $(prefix + 'td.paramNote input').val()
            };

            return data;
        }

        function makeStringParam(prefix) {
            var data = {
                type: 'string',
                desc: $(prefix + 'td.paramNote input').val()
            }

            return data;
        }

        function makeRequest() {
            var data = {};
            var len = $('table.c2s tr.c2s').length;

            for (var i = 0; i < len; ++i) {
                var prefix = 'table.c2s tr.c2s:eq(' + i + ') ';
                var name = $(prefix + 'td.paramName input').val();
                var type = $(prefix + 'td.param select').val();

                switch(type) {
                    case 'int':
                        data[name] = makeIntParam(prefix);
                        break;
                    case 'string':
                        data[name] = makeStringParam(prefix);
                        break;
                    case 'array':
                        data[name] = makeArrayParam(prefix);
                        break;
                    case 'simpleArray':
                        data[name] = makeSimpleArrayParam(prefix);
                        break;
                }
            }

            return data;
        }

        function makeAck() {
            var data = {};


            return data;
        }

        function onCommitClicked() {
            var type = $('select.type').val();
            var data = {
                route: $('input.route').val(),
                "note": $('input.note').val(),
            };

            if (type === 'request') {
                data.request = makeRequest();
                data.ack = makeAck();
            }
            else if (type === 'push') {
                data.request = makeRequest();
            }
            else if (type === 'notify') {
                data.ack = makeAck();
            }
            else {
                alert("协议类型错误");
                return;
            }

            console.log(data);
        }

    h1 协议编辑

    div
        p 路由：
            input.route() 

        p 描述：
            input.note

        p 类型：
            select.type
                option request
                option push
                option notify

        div.templates(style="display : none")
            +tableTemplateMixin('c2s')
            +tableTemplateMixin('s2c')

            +tableArrayTemplateMixin('c2s')
            +tableArrayTemplateMixin('s2c')


        div.c2s
            +paramsMixin('c2s')

        div.s2c
            +paramsMixin('s2c')


        div
            hr
            button(onclick="onCommitClicked()") 保存