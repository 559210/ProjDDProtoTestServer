
script(type="text/javascript").
    var pugDataJobList = !{JSON.stringify(jobList)};
    var pugDataJobDetail = !{JSON.stringify(jobDetail !== undefined ? jobDetail : null)};
    var currentDirectory = '';

    var zTreeObj;
    var zTreeNode = [];
    var zTreeSetting = {
        edit: {
            drag: {
                autoExpandTrigger: true,
                prev: false,//function(){return false;},
                inner: onZTreeEditDragInner,
                next: false //function(){return false;}
            },
            enable: true,
            showRemoveBtn: true,
            showRenameBtn: true,
        },
        view: {
            dblClickExpand: false
        },
        callback: {
            onRightClick: onZTreeRightClick,
            beforeRemove: onTreeBeforeRemove,
            onRemove: onTreeRemove,
            onRename: onTreeRename,
            beforeDrop: onTreeBeforeDrop,
            onDrop: onTreeDrop,
            onClick: onTreeClick
        }
    };

    var editMode = false;
    var rMenu;
    var curMenuSelectedNode;
    var oldParentOnDrop;

    var operatorList = [];  // {op: 1创建job,2 job改名, 3 删除job, jobId: , jobName}

    // zTree 的数据属性，深入使用请参考 API 文档（zTreeNode 节点数据详解）

    function onZTreeRightClick(event, treeId, treeNode) {
        if (treeNode === null || treeNode.isParent !== true) {
            return;
        }
        curMenuSelectedNode = treeNode;
        if (!treeNode && event.target.tagName.toLowerCase() != "button" && $(event.target).parents("a").length == 0) {
            zTreeObj.cancelSelectedNode();
            showRMenu("root", event.clientX, event.clientY);
        } else if (treeNode && !treeNode.noR) {
            zTreeObj.selectNode(treeNode);
            showRMenu("node", event.clientX, event.clientY);
        }
    }

    $(function(){ 
        // do something 
        //- console.log(pugDataJobDetail);
        //- console.log(pugDataJobList);
        createJobList();
    });

    function createJobList() {
        var splitPath = function(path) {
            var ret = [];
            var parts = path.split('/');
            if (parts.length > 1) {
                var s = '';
                for (var i = 0; i < parts.length - 1; ++i) {
                    if (i === 0) {
                        s += parts[i];
                    } else {
                        s += '/' + parts[i];
                    }
                }

                ret.push(s);
                ret.push(parts[parts.length - 1]);
            } else {
                ret.push(path);
            }

            return ret;
        };

        var selectedJobId = null;
        if (pugDataJobDetail !== undefined && pugDataJobDetail !== null) {
            selectedJobId = pugDataJobDetail.jobId;
        }

        //- var zNodes = [];
        var helpNode = {}; // tag, node
        var createTreeNode = function(fullPathname) {
            var node = helpNode[fullPathname];
            if (node) {
                return;
            }
            var sp = splitPath(fullPathname);
            if (sp.length > 1) {
                // 有上级目录
                node = helpNode[sp[0]];
                if (node === undefined) {
                    // 上级目录不存在，创建上级目录
                    createTreeNode(sp[0]);
                }
                // 确保上级目录已经存在，创建自己
                var newNode = {
                    name: sp[1],
                }
                node = helpNode[sp[0]];
                if (node.children === undefined) {
                    node.children = [];
                    node.isParent = true;
                }
                node.children.push(newNode);
                helpNode[fullPathname] = newNode;
            } else {
                var newNode = {
                    name: fullPathname,
                }

                zTreeNode.push(newNode);
                helpNode[fullPathname] = newNode;
            }
        }


        for (var i = 0; i < pugDataJobList.length; ++i) {
            var tag = pugDataJobList[i].tag;
            var fullPathname = tag + (tag.length > 0 ? '/' : '') + pugDataJobList[i].name;
            createTreeNode(fullPathname);
            helpNode[fullPathname].id = pugDataJobList[i].id;
        }

        zTreeNode = [{name: 'ALL JOBS', isParent: true, children: zTreeNode, open: true}];
        $.fn.zTree.init($("#jobList"), zTreeSetting, zTreeNode);
        zTreeObj = $.fn.zTree.getZTreeObj("jobList");

        var selectedNode = zTreeObj.getNodeByParam('id', selectedJobId);

        if (selectedNode !== null) {
            zTreeObj.selectNode(selectedNode);
        }

        rMenu = $("#rMenu");
    }


    function showRMenu(type, x, y) {
        $("#rMenu ul").show();
        if (editMode === false) {
            $("#m_newFolder").hide();
        }
        else {
            $("#m_newFolder").show();
        }
        //- if (type=="root") {

        //-     //- $("#m_del").hide();
        //-     //- $("#m_check").hide();
        //-     //- $("#m_unCheck").hide();
        //- } else {
        //-     //- $("#m_del").show();
        //-     //- $("#m_check").show();
        //-     //- $("#m_unCheck").show();
        //- }
        rMenu.css({"top":y+"px", "left":x+"px", "visibility":"visible"});

        $("body").bind("mousedown", onBodyMouseDown);
    }
    function hideRMenu() {
        if (rMenu) rMenu.css({"visibility": "hidden"});
        $("body").unbind("mousedown", onBodyMouseDown);
    }

    function onBodyMouseDown(event){
        if (!(event.target.id == "rMenu" || $(event.target).parents("#rMenu").length>0)) {
            rMenu.css({"visibility" : "hidden"});
        }
    }

    function onJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");
        socket.emit('OpenJob', {jobName: pugDataJobList[jobIdx].name, jobId: pugDataJobList[jobIdx].id});
    }

    function onAddJobClicked() {
        socket.emit('AddJob', {jobName: $('input.newJobName').val()});
    }

    function onRenameJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        var jobName = pugDataJobList[jobIdx].name;

        tr.find('> td:eq(0) > a#jobName').hide();
        tr.find('> td:eq(1) > div#normal').hide();

        tr.find('> td:eq(0) > input#input').show();
        tr.find('> td:eq(1) > div#rename').show();

        tr.find('> td:eq(0) > input#input').val(jobName);
    }

    function onRemoveJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        if (confirm("删除是不可恢复的，你确认要删除 " + pugDataJobList[jobIdx].name + " 吗？")) {
            socket.emit('RemoveJob', {jobName: pugDataJobList[jobIdx].name, jobId: pugDataJobList[jobIdx].id});
        }
    }

    function onRenameJobOKClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        var jobName = pugDataJobList[jobIdx].name;
        var newName = tr.find('> td:eq(0) > input#input').val();
        if (newName.length == 0) {
            alert('请输入新名字');
            return;
        }

        tr.find('> td:eq(0) > a#jobName').show();
        tr.find('> td:eq(1) > div#normal').show();

        tr.find('> td:eq(0) > input#input').hide();
        tr.find('> td:eq(1) > div#rename').hide();

        socket.emit('RenameJob', {jobName: jobName, jobId: pugDataJobList[jobIdx].id, newJobName: newName});
    }

    function onRenameJobCancelClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        tr.find('> td:eq(0) > a#jobName').show();
        tr.find('> td:eq(1) > div#normal').show();

        tr.find('> td:eq(0) > input#input').hide();
        tr.find('> td:eq(1) > div#rename').hide();  
    }

    function onMenuNewFolder() {
        hideRMenu();

        if (curMenuSelectedNode) {
            var nodes = curMenuSelectedNode.children;
            var newFolderName = 'newFolder';
            var nameIndex = 1;
            var done = true;
            do{
                done = true;
                for (var i = 0; i < nodes.length; ++i) {
                    if (newFolderName === nodes[i].name) {
                        newFolderName += nameIndex;
                        nameIndex++;
                        done = false;
                        break;
                    }
                }
            } while(false == done);

            var newNodes = zTreeObj.addNodes(curMenuSelectedNode, {
                    name: newFolderName,
                    isParent: true,
                    children: []
                });

            if (newNodes && newNodes.length > 0) {
                zTreeObj.editName(newNodes[0]);
            }
        }
    }

    function onMenuNewJob() {
        hideRMenu();

        var newJobName = 'newJob';
        var newJobNameIndex = 1;
        var done = true;

        do {
            done = true;
            for (var i = 0; i < pugDataJobList.length; ++i) {
                if (newJobName === pugDataJobList[i].name) {
                    newJobName += newJobNameIndex;
                    newJobNameIndex++;
                    done = false;
                    break;
                }
            }
        } while(done === false);

        if (curMenuSelectedNode) {
            socket.emit('AddJob', {jobName: newJobName});
        }
    }

    function onTreeBeforeRemove(treeId, treeNode) {
        if (treeNode.isParent === false) {
            if (confirm("删除是不可恢复的，你确认要删除 " + treeNode.name + " 吗？")) {
                return true;
            }
        }

        return false;
    }

    function onTreeRemove(event, treeId, treeNode) {
        if (treeNode.isParent === false) {
            socket.emit('RemoveJob', {jobId: treeNode.id});
        }
    }

    function onTreeRename(event, treeId, treeNode) {
        console.log(treeNode);
        socket.emit('RenameJob', {jobId: treeNode.id, newJobName: treeNode.name});
    }

    function toggleTreeEditor(edit) {
        editMode = edit;
        var toggle = $("a.toggleEdit");
        var cancelBtn = $("a.cancelEdit");

        if (edit) {
            toggle.text("保存编辑");
            cancelBtn.show();
        }
        else {
            toggle.text("编辑目录结构");
            cancelBtn.hide();

            var dirtyJobs = [];
            var nodes = zTreeObj.transformToArray(zTreeObj.getNodes());
            for (var i = 0; i < nodes.length; ++i) {
                if (nodes[i].dirty === true) {
                    nodes[i].dirty = false;
                    
                    var parent = nodes[i].getParentNode();
                    var path = '';
                    if (parent) {
                        path = parent.name;
                        console.log('path 1', path);
                        while (parent.getParentNode() !== null) {
                            parent = parent.getParentNode();

                            if (parent.getParentNode() !== null) {
                                path = parent.name + '/' + path;
                            }
                        }
                    }

                    dirtyJobs.push({
                        newTag: path,
                        jobId: nodes[i].id
                    });
                }
            }

            if (dirtyJobs.length > 0) {
                socket.emit('UpdateJobTagBatch', dirtyJobs);
            }
            console.log(dirtyJobs);
            //- zTreeObj = $.fn.zTree.init($("#jobList"), zTreeObj.setting, nodes);

            //- console.log(zTreeObj.getNodes());
        }    
    }

    function onEditTree() {
        toggleTreeEditor(!editMode);
    }

    function onCancelEditTree() {
        toggleTreeEditor(false);
    }


    
    function onTreeBeforeDrop(treeId, treeNodes, targetNode, moveType) {
        if (editMode === false || targetNode === null) {
            return false;
        }

        oldParentOnDrop = treeNodes[0].getParentNode();

        return true;
    }

    function onTreeDrop(event, treeId, treeNodes, targetNode, moveType) {
        if (oldParentOnDrop) {
            oldParentOnDrop.isParent = true;
            zTreeObj.updateNode(oldParentOnDrop);
        }

        treeNodes[0].dirty = true;
    }

    function onTreeClick(event, treeId, treeNode, clickFlag) {
        if (editMode === false && treeNode.isParent === false) {
            socket.emit('OpenJob', {jobId: treeNode.id});
        }
    }

    function onZTreeEditDragInner(treeId, nodes, targetNode) {
        if (targetNode === null || targetNode.isParent === true) {
            return true;
        }

        return false;
    }

div
    div.ztree#jobList
    br
    br
    table
        tr
            td
                input.newJobName(type='text', style='width:100px')
            td
                a(href='javascript:void(0)', onclick='onAddJobClicked()') 新建


div#rMenu
    ul
        li#m_newFolder(onclick='onMenuNewFolder()') 新建目录
        li#m_newJob(onClick='onMenuNewJob()') 新Job
div
    a.cancelEdit(href='javascript:void(0)', onclick='onCancelEditTree()', style="display : none") 取消编辑 
    a.toggleEdit(href='javascript:void(0)', onclick='onEditTree()') 编辑目录结构