
script(type="text/javascript").
    var pugDataJobList = !{JSON.stringify(jobList)};
    var currentDirectory = '';

    var zTreeObj;
    // zTree 的参数配置，深入使用请参考 API 文档（setting 配置详解）
    var setting = {
        callback: {
            onRightClick: onZTreeRightClick
        }
    };
    // zTree 的数据属性，深入使用请参考 API 文档（zTreeNode 节点数据详解）

    function onZTreeRightClick(event, treeId, treeNode) {
        alert(1);
        if (!treeNode && event.target.tagName.toLowerCase() != "button" && $(event.target).parents("a").length == 0) {
            zTree.cancelSelectedNode();
            showRMenu("root", event.clientX, event.clientY);
        } else if (treeNode && !treeNode.noR) {
            zTree.selectNode(treeNode);
            showRMenu("node", event.clientX, event.clientY);
        }
    }

    $(function(){ 
        // do something 
        createJobList();
    });

    function createJobList() {
        var jobTable = $('div > table.jobList');
        jobTable.find('> tbody > tr').remove();

        var templateTr = $('div.template > table tr:eq(0)');
        var templateSubDirTr = $('div.templateSubDir > table tr:eq(0)');

        var html = templateTr.html();
        var subDirHtml = templateSubDirTr.html();
        
        var reg = new RegExp(".*/.*");
        var addedDirList = {};
        for (var i = 0; i < pugDataJobList.length; ++i) {
            var tag = pugDataJobList[i].tag;
            if (tag === currentDirectory) {
                var ht = '<tr class="jobId" jobIndex="' + i + '">' + html + '</tr>';
                ht = ht.replace('__jobName__', pugDataJobList[i].name);
                jobTable.append(ht);
            }
            else {
                var found = tag.search(currentDirectory);
                if (found === 0) {
                    var subTag = tag.replace(currentDirectory, '');
                    console.log('1', subTag);
                    if (subTag.search('/') >= 0) {
                        var result = subTag.match("(.*?)/.*");
                        if (result && result.length > 1) {
                            subTag = result[1];
                        }
                    }

                    console.log('2', subTag);
                    if (addedDirList[subTag] === undefined) {
                        addedDirList[subTag] = 1;

                        var ht = '<tr class="jobDir">' + subDirHtml + '</tr>';
                        ht = ht.replace('__jobName__', subTag);
                        jobTable.append(ht);
                    }
                }
            }
        }

        //- var zNodes = [{
        //-     name: "test1",
        //-     open: true,
        //-     children: [{
        //-         name: "test1_1"
        //-     }, {
        //-         name: "test1_2"
        //-     }]
        //- }, {
        //-     name: "test2",
        //-     open: true,
        //-     children: [{
        //-         name: "test2_1"
        //-     }, {
        //-         name: "test2_2"
        //-     }]
        //- }];


        var splitPath = function(path) {
            var ret = [];
            var parts = path.split('/');
            if (parts.length > 1) {
                var s = '';
                for (var i = 0; i < parts.length - 1; ++i) {
                    if (i === 0) {
                        s += parts[i];
                    } else {
                        s += '/' + parts[i];
                    }
                }

                ret.push(s);
                ret.push(parts[parts.length - 1]);
            } else {
                ret.push(path);
            }

            return ret;
        };


        var zNodes = [];
        var helpNode = {}; // tag, node

        var createTreeNode = function(fullPathname) {
            var node = helpNode[fullPathname];
            if (node) {
                return;
            }
            var sp = splitPath(fullPathname);
            if (sp.length > 1) {
                // 有上级目录
                node = helpNode[sp[0]];
                if (node === undefined) {
                    // 上级目录不存在，创建上级目录
                    createTreeNode(sp[0]);
                }
                // 确保上级目录已经存在，创建自己
                var newNode = {
                    name: sp[1],
                }
                node = helpNode[sp[0]];
                if (node.children === undefined) {
                    node.children = [];
                }
                node.children.push(newNode);
                helpNode[fullPathname] = newNode;
            } else {
                var newNode = {
                    name: fullPathname,
                }

                zNodes.push(newNode);
                helpNode[fullPathname] = newNode;
            }
        }


        for (var i = 0; i < pugDataJobList.length; ++i) {
            var tag = pugDataJobList[i].tag;
            var fullPathname = tag + (tag.length > 0 ? '/' : '') + pugDataJobList[i].name;
            createTreeNode(fullPathname);
        }

        zTreeObj = $.fn.zTree.init($("#jobList"), setting, zNodes);
    }

    function onSubDirClicked(obj) {
        if (currentDirectory.length > 0) {
            currentDirectory = currentDirectory + $(obj).text() + '/';
        }
        else {
            currentDirectory = $(obj).text() + '/';
        }
        console.log('---', currentDirectory);
        createJobList();
    }


    function onJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");
        socket.emit('OpenJob', {jobName: pugDataJobList[jobIdx].name, jobId: pugDataJobList[jobIdx].id});
    }

    function onAddJobClicked() {
        socket.emit('AddJob', {jobName: $('input.newJobName').val()});
    }

    function onRenameJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        var jobName = pugDataJobList[jobIdx].name;

        tr.find('> td:eq(0) > a#jobName').hide();
        tr.find('> td:eq(1) > div#normal').hide();

        tr.find('> td:eq(0) > input#input').show();
        tr.find('> td:eq(1) > div#rename').show();

        tr.find('> td:eq(0) > input#input').val(jobName);
    }

    function onRemoveJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        if (confirm("删除是不可恢复的，你确认要删除 " + pugDataJobList[jobIdx].name + " 吗？")) {
            socket.emit('RemoveJob', {jobName: pugDataJobList[jobIdx].name, jobId: pugDataJobList[jobIdx].id});
        }
    }

    function onRenameJobOKClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        var jobName = pugDataJobList[jobIdx].name;
        var newName = tr.find('> td:eq(0) > input#input').val();
        if (newName.length == 0) {
            alert('请输入新名字');
            return;
        }

        tr.find('> td:eq(0) > a#jobName').show();
        tr.find('> td:eq(1) > div#normal').show();

        tr.find('> td:eq(0) > input#input').hide();
        tr.find('> td:eq(1) > div#rename').hide();

        socket.emit('RenameJob', {jobName: jobName, jobId: pugDataJobList[jobIdx].id, newJobName: newName});
    }

    function onRenameJobCancelClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        tr.find('> td:eq(0) > a#jobName').show();
        tr.find('> td:eq(1) > div#normal').show();

        tr.find('> td:eq(0) > input#input').hide();
        tr.find('> td:eq(1) > div#rename').hide();  
    }

    function showDirTree() {
        $('div#dirTree').show();
    }

    function hideDirTree() {
        $('div#dirTree').hide();
    }

div.template(style="display : none")
    table(border='1', align='center')
        tr
            td(style='width:110px', align='center')
                a(id='jobName', href="javascript:void(0)", onclick='onJobClicked(this)') __jobName__
                input(id='input', type='text', style='width:100px; display:none')
            td
                div(id='normal')
                    a(href="javascript:void(0)", onclick="onRenameJobClicked(this)") 改名
                    br
                    a(href="javascript:void(0)", onclick="onRemoveJobClicked(this)") 删除
                div(id='rename', style='display:none')
                    a(href="javascript:void(0)", onclick="onRenameJobOKClicked(this)") 确定
                    br
                    a(href="javascript:void(0)", onclick="onRenameJobCancelClicked(this)") 取消

div.templateSubDir(style="display : none")
    table(border='1', align='center')
        tr
            td(style='width:110px', align='center')
                a(id='jobName', href="javascript:void(0)", onclick='onSubDirClicked(this)') __jobName__
                input(id='input', type='text', style='width:100px; display:none')
            td


div.protocolPopupWindowDiv#dirTree(style="display : none")
    a(href="javascript:hideDirTree()" style="right : 14; position : absolute;") 关闭窗口
    div.protocolPopupDiv(onclick="hideDirTree()")
        span.protocolSpan x

    div(style="width : 100%; height : 95%; top : 20; position : absolute; overflow : auto")
        include dirTree
        //- script.
        //-     // g_event is defined in protocolList
        //-     g_event.bind('protoList_routeclicked', function(data) {
        //-         socket.emit('AddProto', data);
        //-         closeDivFun();
        //-     });

div
    //- ul(style="list-style-type:none;")
    table.jobList(border='1', align='center')
    div.ztree#jobList
    br
    br
    table
        tr
            td
                input.newJobName(type='text', style='width:100px')
            td
                a(href='javascript:void(0)', onclick='onAddJobClicked()') 新建



div
    a(href='javascript:void(0)', onclick='showDirTree()') test