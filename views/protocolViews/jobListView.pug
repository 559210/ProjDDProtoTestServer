
script(type="text/javascript").
    var pugDataJobList = !{JSON.stringify(jobList)};
    var currentDirectory = '';

    var zTreeObj;
    var zTreeNode = [];
    var zTreeSetting = {
        edit: {
            enable: false,
            showRemoveBtn: true,
            showRenameBtn: true,
        },
        view: {
            dblClickExpand: false
        },
        callback: {
            onRightClick: null,
            onRemove: onTreeRemove,
            onRename: onTreeRename,
            beforeDrop: onTreeBeforeDrop,
            onClick: onTreeClick
        }
    };
    var rMenu;

    // zTree 的数据属性，深入使用请参考 API 文档（zTreeNode 节点数据详解）

    function onZTreeRightClick(event, treeId, treeNode) {
        if (!treeNode && event.target.tagName.toLowerCase() != "button" && $(event.target).parents("a").length == 0) {
            zTreeObj.cancelSelectedNode();
            showRMenu("root", event.clientX, event.clientY);
        } else if (treeNode && !treeNode.noR) {
            zTreeObj.selectNode(treeNode);
            showRMenu("node", event.clientX, event.clientY);
        }
    }

    $(function(){ 
        // do something 
        createJobList();
    });

    function createJobList() {
        var splitPath = function(path) {
            var ret = [];
            var parts = path.split('/');
            if (parts.length > 1) {
                var s = '';
                for (var i = 0; i < parts.length - 1; ++i) {
                    if (i === 0) {
                        s += parts[i];
                    } else {
                        s += '/' + parts[i];
                    }
                }

                ret.push(s);
                ret.push(parts[parts.length - 1]);
            } else {
                ret.push(path);
            }

            return ret;
        };

        //- var zNodes = [];
        var helpNode = {}; // tag, node
        var createTreeNode = function(fullPathname) {
            var node = helpNode[fullPathname];
            if (node) {
                return;
            }
            var sp = splitPath(fullPathname);
            if (sp.length > 1) {
                // 有上级目录
                node = helpNode[sp[0]];
                if (node === undefined) {
                    // 上级目录不存在，创建上级目录
                    createTreeNode(sp[0]);
                }
                // 确保上级目录已经存在，创建自己
                var newNode = {
                    name: sp[1],
                }
                node = helpNode[sp[0]];
                if (node.children === undefined) {
                    node.children = [];
                    node.isParent = true;
                }
                node.children.push(newNode);
                helpNode[fullPathname] = newNode;
            } else {
                var newNode = {
                    name: fullPathname,
                }

                zTreeNode.push(newNode);
                helpNode[fullPathname] = newNode;
            }
        }


        for (var i = 0; i < pugDataJobList.length; ++i) {
            var tag = pugDataJobList[i].tag;
            var fullPathname = tag + (tag.length > 0 ? '/' : '') + pugDataJobList[i].name;
            createTreeNode(fullPathname);
            helpNode[fullPathname].id = pugDataJobList[i].id;
        }

        $.fn.zTree.init($("#jobList"), zTreeSetting, zTreeNode);
        zTreeObj = $.fn.zTree.getZTreeObj("jobList");

        rMenu = $("#rMenu");
    }

    function setzTreeEditorMode(edit) {
        zTreeObj.setting.edit.enable = edit;
        zTreeObj.setting.callback.onRightClick = edit ? onZTreeRightClick : null;
    }

    function showRMenu(type, x, y) {
        $("#rMenu ul").show();
        if (type=="root") {
            //- $("#m_del").hide();
            //- $("#m_check").hide();
            //- $("#m_unCheck").hide();
        } else {
            //- $("#m_del").show();
            //- $("#m_check").show();
            //- $("#m_unCheck").show();
        }
        rMenu.css({"top":y+"px", "left":x+"px", "visibility":"visible"});

        $("body").bind("mousedown", onBodyMouseDown);
    }
    function hideRMenu() {
        if (rMenu) rMenu.css({"visibility": "hidden"});
        $("body").unbind("mousedown", onBodyMouseDown);
    }

    function onBodyMouseDown(event){
        if (!(event.target.id == "rMenu" || $(event.target).parents("#rMenu").length>0)) {
            rMenu.css({"visibility" : "hidden"});
        }
    }

    function onJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");
        socket.emit('OpenJob', {jobName: pugDataJobList[jobIdx].name, jobId: pugDataJobList[jobIdx].id});
    }

    function onAddJobClicked() {
        socket.emit('AddJob', {jobName: $('input.newJobName').val()});
    }

    function onRenameJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        var jobName = pugDataJobList[jobIdx].name;

        tr.find('> td:eq(0) > a#jobName').hide();
        tr.find('> td:eq(1) > div#normal').hide();

        tr.find('> td:eq(0) > input#input').show();
        tr.find('> td:eq(1) > div#rename').show();

        tr.find('> td:eq(0) > input#input').val(jobName);
    }

    function onRemoveJobClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        if (confirm("删除是不可恢复的，你确认要删除 " + pugDataJobList[jobIdx].name + " 吗？")) {
            socket.emit('RemoveJob', {jobName: pugDataJobList[jobIdx].name, jobId: pugDataJobList[jobIdx].id});
        }
    }

    function onRenameJobOKClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        var jobName = pugDataJobList[jobIdx].name;
        var newName = tr.find('> td:eq(0) > input#input').val();
        if (newName.length == 0) {
            alert('请输入新名字');
            return;
        }

        tr.find('> td:eq(0) > a#jobName').show();
        tr.find('> td:eq(1) > div#normal').show();

        tr.find('> td:eq(0) > input#input').hide();
        tr.find('> td:eq(1) > div#rename').hide();

        socket.emit('RenameJob', {jobName: jobName, jobId: pugDataJobList[jobIdx].id, newJobName: newName});
    }

    function onRenameJobCancelClicked(obj) {
        var tr = $(obj).closest('tr.jobId');
        var jobIdx = tr.attr("jobIndex");

        tr.find('> td:eq(0) > a#jobName').show();
        tr.find('> td:eq(1) > div#normal').show();

        tr.find('> td:eq(0) > input#input').hide();
        tr.find('> td:eq(1) > div#rename').hide();  
    }

    function onMenuNewFolder() {
        hideRMenu();

        //- zTreeObj.
    }

    function onTreeRemove(event, treeId, treeNode) {
    }

    function onTreeRename(event, treeId, treeNode) {
    }

    function toggleTreeEditor(edit) {
        var toggle = $("a.toggleEdit");
        var cancelBtn = $("a.cancelEdit");

        if (edit) {
            setzTreeEditorMode(true);
            toggle.text("保存编辑");
            cancelBtn.show();
        }
        else {
            setzTreeEditorMode(false);
            toggle.text("编辑目录结构");
            cancelBtn.hide();

            var nodes = zTreeObj.getNodes();
            for (var i = 0; i < nodes.length; ++i) {
                if (nodes[i].children !== undefined) {
                    nodes[i].isParent = true;
                }
            }
            zTreeObj = $.fn.zTree.init($("#jobList"), zTreeObj.setting.setting, nodes);

            console.log(zTreeObj.getNodes());
        }    
    }

    function onEditTree() {
        toggleTreeEditor(!zTreeObj.setting.edit.enable);
    }

    function onCancelEditTree() {
        toggleTreeEditor(false);
    }

    function onTreeBeforeDrop(treeId, treeNodes, targetNode, moveType) {
        // 放置一个job被拖入另一个job的子节点
        if (moveType === 'inner' && targetNode.isParent === false) {
            return false;
        }
    }

    function onTreeClick(event, treeId, treeNode, clickFlag) {
        if (treeNode.isParent === false) {
            socket.emit('OpenJob', {jobId: treeNode.id});
        }
    }
div
    div.ztree#jobList
    br
    br
    table
        tr
            td
                input.newJobName(type='text', style='width:100px')
            td
                a(href='javascript:void(0)', onclick='onAddJobClicked()') 新建


div#rMenu
    ul
        li#m_newFolder(onclick='onMenuNewFolder') 新建目录
div
    a.cancelEdit(href='javascript:void(0)', onclick='onCancelEditTree()', style="display : none") 取消编辑 
    a.toggleEdit(href='javascript:void(0)', onclick='onEditTree()') 编辑目录结构