script.
    var pugDataRunningJobs = !{JSON.stringify(runningJobs)};
    var zTreeObj;
    var zTreeNode = [];
    var zTreeSetting = {
        edit: {
            drag: {
                autoExpandTrigger: true,
                prev: false,//function(){return false;},
                //- inner: onZTreeEditDragInner,
                next: false //function(){return false;}
            },
            enable: true,
            showRemoveBtn: true,
            showRenameBtn: false,
        },
        view: {
            dblClickExpand: false
        },
        check: {
            enable: true,
            chkboxType: { "Y": "", "N": "" }
        },
        callback: {
        //-     onRightClick: onZTreeRightClick,
            beforeRemove: onTreeBeforeRemove,
            onRemove: onTreeRemove,
        //-     onRename: onTreeRename,
        //-     beforeDrop: onTreeBeforeDrop,
        //-     onDrop: onTreeDrop,
            onClick: onTreeClick,

            beforeCheck: onTreeBeforeCheck,
            onCheck: onTreeCheck,
        }
    };

    $(function(){ 
        // do something 
        //- console.log(pugDataRunningJobs);
        createRunningJobList();
    });

    socket.on('Console', function(data){
        console.log(data.text);
        return;
        var ta = $('textarea.console');
        ta.text(ta.val() + '\r\n' + data.text);

        ta.scrollTop(ta[0].scrollHeight);

        console.log(data.text);
    });


    /////////////////////////////////

    function createRunningJobList() {
        zTreeNode = [];
        for (var key in pugDataRunningJobs) {
            let node = {name: key, isParent: true, children: []};
            
            for (var i = 0; i < pugDataRunningJobs[key].length; ++i) {
                console.log(pugDataRunningJobs[key][i]);
                node.children.push({name: pugDataRunningJobs[key][i].name, isParent: false, id: pugDataRunningJobs[key][i].runningJobId});
            }

            zTreeNode.push(node);
        }

        zTreeNode = [{name: 'ALL JOBS', isParent: true, children: zTreeNode, open: true}];
        $.fn.zTree.init($("#runningJobList"), zTreeSetting, zTreeNode);
        zTreeObj = $.fn.zTree.getZTreeObj("runningJobList");

        //- var selectedNode = zTreeObj.getNodeByParam('id', selectedJobId);

        //- if (selectedNode !== null) {
        //-     zTreeObj.selectNode(selectedNode);
        //- }
    }

    function onTreeRemove(event, treeId, treeNode) {
        if (treeNode.isParent === false) {
            socket.emit('closeRunningJob', {runningJobId: treeNode.id});
        }
    }

    function onTreeBeforeRemove(treeId, treeNode) {
        if (treeNode.isParent === false) {
            if (confirm("确定要关闭此Job吗？ job名字: " + treeNode.name)) {
                return true;
            }
        }

        return false;
    }

    function onTreeClick(event, treeId, treeNode, clickFlag) {
        console.log('event: ');
        console.log(event);
        console.log('treeId: ');
        console.log(treeId);
        console.log('clickFlag');
        console.log(clickFlag);
        //- console.log('event: %j, treeId: %j, clickFlag: %j', event, treeId, clickFlag);
        //- if (treeNode.isParent === false) {
        //-     socket.emit('subscribeConsole', {runningJobId: treeNode.id});
        //- }
    }

    function onTreeBeforeCheck(treeId, treeNode) {
        if (treeNode.isParent) {
            return false;
        }

        return true;
    };

    function onTreeCheck(event, treeId, treeNode) {
        //- console.log(treeNode.tId + ", " + treeNode.name + "," + treeNode.checked);
        if (treeNode.checked) {
            socket.emit('subscribeConsole', {runningJobId: treeNode.id});
        }
        else {
            socket.emit('unSubscribeConsole', {runningJobId: treeNode.id});
        }
    };
div
    div.ztree#runningJobList
