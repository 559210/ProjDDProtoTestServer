script.
    var pugDataRunningJobs = !{JSON.stringify(runningJobs)};
    var zTreeObj;
    var zTreeNode = [];
    var zTreeSetting = {
        edit: {
            drag: {
                autoExpandTrigger: true,
                prev: false,//function(){return false;},
                //- inner: onZTreeEditDragInner,
                next: false //function(){return false;}
            },
            enable: true,
            showRemoveBtn: true,
            showRenameBtn: false,
        },
        view: {
            dblClickExpand: false,
            fontCss : getFontCss,
        },
        check: {
            enable: true,
            chkboxType: { "Y": "", "N": "" }
        },
        callback: {
            onRightClick: onTreeRightClick,
            beforeRemove: onTreeBeforeRemove,
            onRemove: onTreeRemove,
        //-     onRename: onTreeRename,
        //-     beforeDrop: onTreeBeforeDrop,
        //-     onDrop: onTreeDrop,
            onClick: onTreeClick,

            beforeCheck: onTreeBeforeCheck,
            onCheck: onTreeCheck,
        }
    };

    var rMenu;
    var curMenuSelectedNode;
    var selectedJobId;

    $(function(){ 
        // do something 
        //- console.log(pugDataRunningJobs);
        createRunningJobList();
    });


    /////////////////////////////////
    socket.on('onInnerRefresh', function(data) {
        pugDataRunningJobs = data;
        createRunningJobList();
    });


    function createRunningJobList() {
        zTreeNode = [];
        for (var key in pugDataRunningJobs) {
            let node = {name: key, isParent: true, children: []};
            
            for (var i = 0; i < pugDataRunningJobs[key].length; ++i) {
                console.log(pugDataRunningJobs[key][i]);
                node.children.push({
                    name: pugDataRunningJobs[key][i].name, 
                    isParent: false, 
                    id: pugDataRunningJobs[key][i].runningJobId,
                    checked: pugDataRunningJobs[key][i].isSubscribed,
                    consoleColor: pugDataRunningJobs[key][i].color
                });

                if (pugDataRunningJobs[key][i].isSubscribed) {

                }
            }

            zTreeNode.push(node);
        }

        zTreeNode = [{name: 'ALL JOBS', isParent: true, children: zTreeNode, open: true}];
        $.fn.zTree.init($("#runningJobList"), zTreeSetting, zTreeNode);
        zTreeObj = $.fn.zTree.getZTreeObj("runningJobList");

        var selectedNode = zTreeObj.getNodeByParam('id', selectedJobId);

        if (selectedNode !== null) {
            zTreeObj.selectNode(selectedNode);
        }

        rMenu = $("#rMenu");
    }

    function onTreeRemove(event, treeId, treeNode) {
        if (treeNode.isParent === false) {
            socket.emit('closeRunningJob', {runningJobId: treeNode.id});
        }
    }

    function onTreeBeforeRemove(treeId, treeNode) {
        if (treeNode.isParent === false) {
            if (confirm("确定要关闭此Job吗？ job名字: " + treeNode.name)) {
                return true;
            }
        }

        return false;
    }

    function onTreeClick(event, treeId, treeNode, clickFlag) {
        //- console.log('event: ');
        //- console.log(event);
        //- console.log('treeId: ');
        //- console.log(treeId);
        //- console.log('clickFlag');
        //- console.log(clickFlag);
        //- console.log('event: %j, treeId: %j, clickFlag: %j', event, treeId, clickFlag);
        //- if (treeNode.isParent === false) {
        //-     socket.emit('subscribeConsole', {runningJobId: treeNode.id});
        //- }

    }


    function onTreeBeforeCheck(treeId, treeNode) {
        
        
        if (treeNode.isParent) {
            return false;
        }

        return true;
    };

    function onTreeCheck(event, treeId, treeNode) {
        //- console.log(treeNode.tId + ", " + treeNode.name + "," + treeNode.checked);
        

        if (treeNode.checked) {
            socket.emit('subscribeConsole', {runningJobId: treeNode.id, color: 'ff0000'});
        }
        else {
            socket.emit('unSubscribeConsole', {runningJobId: treeNode.id});
        }


    };

    function onTreeRightClick(event, treeId, treeNode) {
        if (treeNode === null || treeNode.isParent === true) {
            return;
        }
        curMenuSelectedNode = treeNode;
        if (!treeNode && event.target.tagName.toLowerCase() != "button" && $(event.target).parents("a").length == 0) {
            zTreeObj.cancelSelectedNode();
            showRMenu("root", event.clientX, event.clientY);
        } else if (treeNode && !treeNode.noR) {
            zTreeObj.selectNode(treeNode);
            showRMenu("node", event.clientX, event.clientY);
        }
    }

    function showRMenu(type, x, y) {
        $("#rMenu ul").show();

        rMenu.css({"top":y+"px", "left":x+"px", "visibility":"visible"});

        $("body").bind("mousedown", onBodyMouseDown);
    }

    function onBodyMouseDown(event){
        if (!(event.target.id == "rMenu" || $(event.target).parents("#rMenu").length>0)) {
            rMenu.css({"visibility" : "hidden"});
        }
    }

    function onMenuPickColor() {
        function onPaletteDone(color) {
            if (curMenuSelectedNode !== undefined && curMenuSelectedNode !== null) {
                selectedJobId = curMenuSelectedNode.id;
                socket.emit('setSubscribedConsoleColor', {runningJobId: selectedJobId, color: color})
                //- curMenuSelectedNode.consoleColor = color;
            }
        }

        showGlobalPalette(onPaletteDone);
    }



    function getFontCss(treeId, treeNode) {
        if (typeof treeNode.consoleColor === 'string') {
            return {color: "#" + treeNode.consoleColor};
        }
        else {
            return {};

        }
    }

div
    div.ztree#runningJobList
    include palette

div#rMenu
    ul
        li#m_newFolder(onclick='onMenuPickColor()') 设置颜色

